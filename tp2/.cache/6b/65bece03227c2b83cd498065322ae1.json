{"id":"scripts/preprocess.js","dependencies":[{"name":"/Users/oliviagelinas/Dev/repos/inf8808_tps/tp2/js/code/package.json","includedInParent":true,"mtime":1607885038167}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cleanNames = cleanNames;\nexports.getTopPlayers = getTopPlayers;\nexports.summarizeLines = summarizeLines;\nexports.replaceOthers = replaceOthers;\n\n/**\n * Sanitizes the names from the data in the \"Player\" column.\n *\n * Ensures each word in the name begins with an uppercase letter followed by lowercase letters.\n *\n * @param {object[]} data The dataset with unsanitized names\n * @returns {object[]} The dataset with properly capitalized names\n */\nfunction cleanNames(data) {\n  // TODO: Clean the player name data\n  return [];\n}\n/**\n * Finds the names of the 5 players with the most lines in the play.\n *\n * @param {object[]} data The dataset containing all the lines of the play\n * @returns {string[]} The names of the top 5 players with most lines\n */\n\n\nfunction getTopPlayers(data) {\n  // TODO: Find the five top players with the most lines in the play\n  return [];\n}\n/**\n * Transforms the data by nesting it, grouping by act and then by player, indicating the line count\n * for each player in each act.\n *\n * The resulting data structure ressembles the following :\n *\n * [\n *  { Act : ___,\n *    Players : [\n *     {\n *       Player : ___,\n *       Count : ___\n *     }, ...\n *    ]\n *  }, ...\n * ]\n *\n * The number of the act (starting at 1) follows the 'Act' key. The name of the player follows the\n * 'Player' key. The number of lines that player has in that act follows the 'Count' key.\n *\n * @param {object[]} data The dataset\n * @returns {object[]} The nested data set grouping the line count by player and by act\n */\n\n\nfunction summarizeLines(data) {\n  // TODO : Generate the data structure as defined above\n  return [];\n}\n/**\n * For each act, replaces the players not in the top 5 with a player named 'Other',\n * whose line count corresponds to the sum of lines uttered in the act by players other\n * than the top 5 players.\n *\n * @param {object[]} data The dataset containing the count of lines of all players\n * @param {string[]} top The names of the top 5 players with the most lines in the play\n * @returns {object[]} The dataset with players not in the top 5 summarized as 'Other'\n */\n\n\nfunction replaceOthers(data, top) {\n  // TODO : For each act, sum the lines uttered by players not in the top 5 for the play\n  // and replace these players in the data structure by a player with name 'Other' and\n  // a line count corresponding to the sum of lines\n  return [];\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":11,"column":0},"source":"scripts/preprocess.js","original":{"line":2,"column":0}},{"generated":{"line":19,"column":0},"source":"scripts/preprocess.js","original":{"line":10,"column":7}},{"name":"cleanNames","generated":{"line":19,"column":9},"source":"scripts/preprocess.js","original":{"line":10,"column":16}},{"generated":{"line":19,"column":19},"source":"scripts/preprocess.js","original":{"line":10,"column":7}},{"name":"data","generated":{"line":19,"column":20},"source":"scripts/preprocess.js","original":{"line":10,"column":28}},{"generated":{"line":19,"column":24},"source":"scripts/preprocess.js","original":{"line":10,"column":7}},{"generated":{"line":19,"column":26},"source":"scripts/preprocess.js","original":{"line":10,"column":34}},{"generated":{"line":20,"column":0},"source":"scripts/preprocess.js","original":{"line":11,"column":2}},{"generated":{"line":21,"column":0},"source":"scripts/preprocess.js","original":{"line":12,"column":2}},{"generated":{"line":21,"column":9},"source":"scripts/preprocess.js","original":{"line":12,"column":9}},{"generated":{"line":21,"column":11},"source":"scripts/preprocess.js","original":{"line":12,"column":2}},{"generated":{"line":22,"column":0},"source":"scripts/preprocess.js","original":{"line":13,"column":1}},{"generated":{"line":23,"column":0},"source":"scripts/preprocess.js","original":{"line":15,"column":0}},{"generated":{"line":31,"column":0},"source":"scripts/preprocess.js","original":{"line":21,"column":7}},{"name":"getTopPlayers","generated":{"line":31,"column":9},"source":"scripts/preprocess.js","original":{"line":21,"column":16}},{"generated":{"line":31,"column":22},"source":"scripts/preprocess.js","original":{"line":21,"column":7}},{"name":"data","generated":{"line":31,"column":23},"source":"scripts/preprocess.js","original":{"line":21,"column":31}},{"generated":{"line":31,"column":27},"source":"scripts/preprocess.js","original":{"line":21,"column":7}},{"generated":{"line":31,"column":29},"source":"scripts/preprocess.js","original":{"line":21,"column":37}},{"generated":{"line":32,"column":0},"source":"scripts/preprocess.js","original":{"line":22,"column":2}},{"generated":{"line":33,"column":0},"source":"scripts/preprocess.js","original":{"line":23,"column":2}},{"generated":{"line":33,"column":9},"source":"scripts/preprocess.js","original":{"line":23,"column":9}},{"generated":{"line":33,"column":11},"source":"scripts/preprocess.js","original":{"line":23,"column":2}},{"generated":{"line":34,"column":0},"source":"scripts/preprocess.js","original":{"line":24,"column":1}},{"generated":{"line":35,"column":0},"source":"scripts/preprocess.js","original":{"line":26,"column":0}},{"generated":{"line":60,"column":0},"source":"scripts/preprocess.js","original":{"line":49,"column":7}},{"name":"summarizeLines","generated":{"line":60,"column":9},"source":"scripts/preprocess.js","original":{"line":49,"column":16}},{"generated":{"line":60,"column":23},"source":"scripts/preprocess.js","original":{"line":49,"column":7}},{"name":"data","generated":{"line":60,"column":24},"source":"scripts/preprocess.js","original":{"line":49,"column":32}},{"generated":{"line":60,"column":28},"source":"scripts/preprocess.js","original":{"line":49,"column":7}},{"generated":{"line":60,"column":30},"source":"scripts/preprocess.js","original":{"line":49,"column":38}},{"generated":{"line":61,"column":0},"source":"scripts/preprocess.js","original":{"line":50,"column":2}},{"generated":{"line":62,"column":0},"source":"scripts/preprocess.js","original":{"line":51,"column":2}},{"generated":{"line":62,"column":9},"source":"scripts/preprocess.js","original":{"line":51,"column":9}},{"generated":{"line":62,"column":11},"source":"scripts/preprocess.js","original":{"line":51,"column":2}},{"generated":{"line":63,"column":0},"source":"scripts/preprocess.js","original":{"line":52,"column":1}},{"generated":{"line":64,"column":0},"source":"scripts/preprocess.js","original":{"line":54,"column":0}},{"generated":{"line":75,"column":0},"source":"scripts/preprocess.js","original":{"line":63,"column":7}},{"name":"replaceOthers","generated":{"line":75,"column":9},"source":"scripts/preprocess.js","original":{"line":63,"column":16}},{"generated":{"line":75,"column":22},"source":"scripts/preprocess.js","original":{"line":63,"column":7}},{"name":"data","generated":{"line":75,"column":23},"source":"scripts/preprocess.js","original":{"line":63,"column":31}},{"generated":{"line":75,"column":27},"source":"scripts/preprocess.js","original":{"line":63,"column":7}},{"name":"top","generated":{"line":75,"column":29},"source":"scripts/preprocess.js","original":{"line":63,"column":37}},{"generated":{"line":75,"column":32},"source":"scripts/preprocess.js","original":{"line":63,"column":7}},{"generated":{"line":75,"column":34},"source":"scripts/preprocess.js","original":{"line":63,"column":42}},{"generated":{"line":76,"column":0},"source":"scripts/preprocess.js","original":{"line":64,"column":2}},{"generated":{"line":77,"column":0},"source":"scripts/preprocess.js","original":{"line":65,"column":2}},{"generated":{"line":78,"column":0},"source":"scripts/preprocess.js","original":{"line":66,"column":2}},{"generated":{"line":79,"column":0},"source":"scripts/preprocess.js","original":{"line":67,"column":2}},{"generated":{"line":79,"column":9},"source":"scripts/preprocess.js","original":{"line":67,"column":9}},{"generated":{"line":79,"column":11},"source":"scripts/preprocess.js","original":{"line":67,"column":2}},{"generated":{"line":80,"column":0},"source":"scripts/preprocess.js","original":{"line":68,"column":1}}],"sources":{"scripts/preprocess.js":"\n/**\n * Sanitizes the names from the data in the \"Player\" column.\n *\n * Ensures each word in the name begins with an uppercase letter followed by lowercase letters.\n *\n * @param {object[]} data The dataset with unsanitized names\n * @returns {object[]} The dataset with properly capitalized names\n */\nexport function cleanNames (data) {\n  // TODO: Clean the player name data\n  return []\n}\n\n/**\n * Finds the names of the 5 players with the most lines in the play.\n *\n * @param {object[]} data The dataset containing all the lines of the play\n * @returns {string[]} The names of the top 5 players with most lines\n */\nexport function getTopPlayers (data) {\n  // TODO: Find the five top players with the most lines in the play\n  return []\n}\n\n/**\n * Transforms the data by nesting it, grouping by act and then by player, indicating the line count\n * for each player in each act.\n *\n * The resulting data structure ressembles the following :\n *\n * [\n *  { Act : ___,\n *    Players : [\n *     {\n *       Player : ___,\n *       Count : ___\n *     }, ...\n *    ]\n *  }, ...\n * ]\n *\n * The number of the act (starting at 1) follows the 'Act' key. The name of the player follows the\n * 'Player' key. The number of lines that player has in that act follows the 'Count' key.\n *\n * @param {object[]} data The dataset\n * @returns {object[]} The nested data set grouping the line count by player and by act\n */\nexport function summarizeLines (data) {\n  // TODO : Generate the data structure as defined above\n  return []\n}\n\n/**\n * For each act, replaces the players not in the top 5 with a player named 'Other',\n * whose line count corresponds to the sum of lines uttered in the act by players other\n * than the top 5 players.\n *\n * @param {object[]} data The dataset containing the count of lines of all players\n * @param {string[]} top The names of the top 5 players with the most lines in the play\n * @returns {object[]} The dataset with players not in the top 5 summarized as 'Other'\n */\nexport function replaceOthers (data, top) {\n  // TODO : For each act, sum the lines uttered by players not in the top 5 for the play\n  // and replace these players in the data structure by a player with name 'Other' and\n  // a line count corresponding to the sum of lines\n  return []\n}\n"},"lineCount":null}},"error":null,"hash":"8b019f6a92c7e3808c8f4c5c16888f42","cacheData":{"env":{}}}